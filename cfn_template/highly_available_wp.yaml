AWSTemplateFormatVersion: 2010-09-09
Description: |
  This template creates a highly available WordPress installation.
  It uses a load balancer to distribute traffic to the instances.
  It uses an Auto Scaling group to scale up and down.

Parameters:
  RDSMasterUsername:
    Type: String
    Description: The master username for the RDS instance
  RDSMasterPassword:
    Type: String
    Description: The master user password for the RDS instance
    NoEcho: true
  KeyName:
    Type: String
    Description: The name of an existing EC2 KeyPair to enable SSH access to the instances
  WPAdminUsername:
    Type: String
    Description: The WordPress admin username
  WPAdminPassword:
    Type: String
    Description: The WordPress admin password
    NoEcho: true
  WPHostname:
    Type: String
    Description: The WordPress hostname
  WPAdminEmail:
    Type: String
    Description: The WordPress admin email address

Resources:
  # Network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  ## IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  ## Nat Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetAZ1
  ## Route Tables
  ### Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  ### Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  ## Public subnets
  ### Subnet 1
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
  PublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1
  ### Subnet 2
  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/25
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
  PublicSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ2
  ### Subnet 3
  PublicSubnetAZ3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/25
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
  PublicSubnetAZ3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ3
  ## Private subnets
  ### Subnet 1
  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.4.0/26
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
  PrivateSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAZ1
  ### Subnet 2
  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.5.0/26
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
  PrivateSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAZ2

  # Security Groups
  ## Web Security Group
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Web
      GroupDescription: Web access
      VpcId: !Ref VPC
  ### Web Security Group Rules
  WebSecurityGroupHTTPInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  WebSecurityGroupHTTPSInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  WebSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref WebSecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
      CidrIp: 0.0.0.0/0
  ## SSH Security Group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SSH
      GroupDescription: SSH access
      VpcId: !Ref VPC
  ### SSH Security Group Rules
  SSHSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SSHSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  ## EFS Security Group
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EFS
      GroupDescription: EFS access
      VpcId: !Ref VPC
  ### EFS Security Group Rules
  EFSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref WebSecurityGroup
  ## RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RDS
      GroupDescription: RDS access
      VpcId: !Ref VPC
  ### RDS Security Group Rules
  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref WebSecurityGroup

  # EFS
  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  ElasticFileSystemMountTargetAZ1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SubnetId: !Ref PublicSubnetAZ1
      SecurityGroups:
        - !Ref EFSSecurityGroup
  ElasticFileSystemMountTargetAZ2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SubnetId: !Ref PublicSubnetAZ2
      SecurityGroups:
        - !Ref EFSSecurityGroup
  ElasticFileSystemMountTargetAZ3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SubnetId: !Ref PublicSubnetAZ3
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # RDS
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword: !Ref RDSMasterPassword
      AllocatedStorage: "5"
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref RDSSubnetGroup
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
        - !Ref PrivateSubnetAZ1
        - !Ref PrivateSubnetAZ2

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2
        - !Ref PublicSubnetAZ3
  ## Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: "200,301,404"

  # ASG
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: "600"
      HealthCheckGracePeriod: 1200
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: "3"
      MinSize: "2"
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2
        - !Ref PublicSubnetAZ3
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_nginx
        install_nginx:
          packages:
            - nginx
          services:
            systemctl:
              - enable: nginx
                state: started
                ensure: present
    Properties:
      ImageId: "ami-0c8fd0f7cbd3aed99"
      InstanceType: t3.small
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebSecurityGroup
        - !Ref SSHSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            echo "Mounting EBS"
            mkdir -p /var/www/wordpress
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            cd /var/www/wordpress
            if ! /usr/local/bin/wp core is-installed --allow-root > /dev/null 2>&1; then
              /usr/local/bin/wp core download --locale=es_ES
              /usr/local/bin/wp config create --dbname=wordpress --dbuser=${RDSMasterUsername} --dbpass=${RDSMasterPassword} --dbhost=${RDS.Endpoint.Address} --dbprefix=wp_ --allow-root
              /usr/local/bin/wp core install --url=${WPHostname} --title=Blog --admin_user=${WPAdminUsername} --admin_password=${WPAdminPassword} --admin_email=${WPAdminEmail} --allow-root
              chown -R nginx:nginx /var/www/wordpress
              /usr/bin/find /var/www/wordpress/ -type d -exec chmod 750 {} \;
              /usr/bin/find /var/www/wordpress/ -type f -exec chmod 640 {} \;
            fi